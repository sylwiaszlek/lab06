package magazyn.lab2;

import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

public class FulfillmentCenter implements Comparator<Item> {

    private String magazineName;
    private List<Item> productsList;
    private double magazineCapacity;

    public FulfillmentCenter(String magazineName, double magazineCapacity) {
        this.magazineName = magazineName;
        this.magazineCapacity = magazineCapacity;
        productsList = new LinkedList<>();
    }

    public List<Item> getProductsList() {
        return productsList;
    }

    public double getMagazineCapacity() {
        return magazineCapacity;
    }

    public void addProduct(Item item) {
        double actualWeight = 0;
        for (Item value : productsList) {
            actualWeight += value.getWeight();
        }
        if ((actualWeight + item.getWeight() <= this.magazineCapacity)) {
            if (exist(item)) {
                for (Item value : productsList) {
                    if (value.compareTo(item) == 0) {
                        value.setCount(value.getCount() + item.getCount());
                        value.setWeight(value.getWeight() + item.getWeight());
                        System.out.println("Znaleziono taki sam produkt! Zwiekszam ilosc produktu!");
                        break;
                    }
                    return;
                }
            } else {
                productsList.add(item);
                System.out.println("Nie znalazłem produktu w aktualnej bazie! Dodaje nowy produkt!");
            }
        } else {
            System.err.println("Pojemnosc magazynu zostala przekroczona! Nie dodaje przedmiotu!");
        }
    }

    private boolean exist(Item item) {
        boolean found = false;
        for (Item value : productsList) {
            if (value.compareTo(item) == 0) {
                found = true;
                break;
            }
        }
        return found;
    }

    public void removeProduct(Item item, int count) {
        if (exist(item)) {
            if (item.getCount() - count < 0) {
                System.out.println("Nie posiadamy takiej ilosci produktu w sklepie, wybierz mniejsza ilosc!");
                throw new RuntimeException("Proszę wybrać prawidłową ilość produktu!");
            } else {
                item.setCount(item.getCount() - count);
                System.out.println("Kupiono produkt!");
            }
            if (item.getCount() == 0) productsList.remove(item);
        } else {
            System.out.println("Nie ma takiego produktu. Nie moge usunac!");
            throw new RuntimeException("Produkt nie istnieje, proszę wyszukać ponownie!");
        }

    }

    public Item search(String productName) {
        for (Item item : productsList) {
            if (String.CASE_INSENSITIVE_ORDER.compare(productName, item.getName()) == 0) {
                return item;
            }
        }
        System.out.println("Nie znaleziono takiego produktu");
        return null;
    }

    @Override
    public int compare(Item o1, Item o2) {
        if (o1.getName().equals(o2.getName())) {
            System.out.println("Znaleziono element");
            return 0;
        } else {
            System.out.println("Nie znaleziono elementu");
            return 1;
        }
    }

    private double procentoweZapelnienie() {
        double masaAktualnie = 0;
        for (Item value : productsList) {
            masaAktualnie += value.getWeight();
        }
        return masaAktualnie / magazineCapacity;
    }

    //Autogenerated
    @Override
    public String toString() {
        return "FulfillmentCenter{" +
                "nazwaMagazynu='" + magazineName + '\'' +
                ", procentoweZapelnienie='" + this.procentoweZapelnienie() +
                '}';
    }
}
